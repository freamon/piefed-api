security:
  - bearerAuth: []
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Error:
      type: object
      properties:
        code:
          type: integer
          description: Error code
        status:
          type: string
          description: Error name
        message:
          type: string
          description: Error message
        errors:
          type: object
          description: Errors
          additionalProperties: {}
      additionalProperties: false
    PaginationMetadata:
      type: object
      properties:
        total:
          type: integer
        total_pages:
          type: integer
        first_page:
          type: integer
        last_page:
          type: integer
        page:
          type: integer
        previous_page:
          type: integer
        next_page:
          type: integer
      additionalProperties: false
    DefaultError:
      type: object
      properties:
        message:
          type: string
      additionalProperties: false
    PersonAggregates:
      type: object
      properties:
        comment_count:
          type: integer
        person_id:
          type: integer
        post_count:
          type: integer
      required:
        - comment_count
        - person_id
        - post_count
    Person:
      type: object
      properties:
        actor_id:
          type: string
          example: https://piefed.social/u/rimu
        banned:
          type: boolean
        bot:
          type: boolean
        deleted:
          type: boolean
        id:
          type: integer
        instance_id:
          type: integer
        local:
          type: boolean
        user_name:
          type: string
        about:
          type: string
          format: markdown
        about_html:
          type: string
          format: html
        avatar:
          type:
            - string
            - "null"
          format: url
        banner:
          type:
            - string
            - "null"
          format: url
        flair:
          type: string
        published:
          type: string
          example: "2025-06-07T02:29:07.980084Z"
          format: datetime
        title:
          type:
            - string
            - "null"
      required:
        - actor_id
        - banned
        - bot
        - deleted
        - id
        - instance_id
        - local
        - user_name
    PersonView:
      type: object
      properties:
        activity_alert:
          type: boolean
        counts:
          $ref: '#/components/schemas/PersonAggregates'
        is_admin:
          type: boolean
        person:
          $ref: '#/components/schemas/Person'
      required:
        - activity_alert
        - counts
        - is_admin
        - person
    LanguageView:
      type: object
      properties:
        code:
          type: string
          example: en
        id:
          type: integer
          example: "2"
        name:
          type: string
          example: English
    Site:
      type: object
      properties:
        actor_id:
          type: string
          format: url
          example: https://piefed.social
        name:
          type: string
        all_languages:
          type: array
          items:
            $ref: '#/components/schemas/LanguageView'
        description:
          type: string
        enable_downvotes:
          type: boolean
        icon:
          type:
            - string
            - "null"
          format: url
        registration_mode:
          type: string
          enum:
            - Closed
            - RequireApplication
            - Open
        sidebar:
          type: string
          format: html
        sidebar_md:
          type: string
          format: markdown
        user_count:
          type: integer
      required:
        - actor_id
        - name
    Community:
      type: object
      properties:
        actor_id:
          type: string
          format: url
          example: https://piefed.social/c/piefed_meta
        ap_domain:
          type: string
          example: piefed.social
        deleted:
          type: boolean
        hidden:
          type: boolean
        id:
          type: integer
        instance_id:
          type: integer
        local:
          type: boolean
        name:
          type: string
        nsfw:
          type: boolean
        published:
          type: string
          example: "2025-06-07T02:29:07.980084Z"
          format: datetime
        removed:
          type: boolean
        restricted_to_mods:
          type: boolean
        title:
          type: string
        banned:
          type: boolean
        banner:
          type:
            - string
            - "null"
          format: url
        description:
          type: string
          format: markdown
        icon:
          type:
            - string
            - "null"
          format: url
        posting_warning:
          type:
            - string
            - "null"
        updated:
          type: string
          example: "2025-06-07T02:29:07.980084Z"
          format: datetime
      required:
        - actor_id
        - deleted
        - hidden
        - id
        - instance_id
        - local
        - name
        - nsfw
        - published
        - removed
        - restricted_to_mods
        - title
    CommunityBlockView:
      type: object
      properties:
        community:
          $ref: '#/components/schemas/Community'
        person:
          $ref: '#/components/schemas/Person'
    CommunityFollowerView:
      type: object
      properties:
        community:
          $ref: '#/components/schemas/Community'
        follower:
          $ref: '#/components/schemas/Person'
      required:
        - community
        - follower
    Instance:
      type: object
      properties:
        domain:
          type: string
          example: piefed.social
        id:
          type: integer
        published:
          type: string
          example: "2025-06-07T02:29:07.980084Z"
          format: datetime
        software:
          type: string
        updated:
          type: string
          example: "2025-06-07T02:29:07.980084Z"
          format: datetime
        version:
          type: string
      required:
        - domain
        - id
        - published
    InstanceBlockView:
      type: object
      properties:
        instance:
          $ref: '#/components/schemas/Instance'
        person:
          $ref: '#/components/schemas/Person'
      required:
        - instance
        - person
    LocalUser:
      type: object
      properties:
        default_comment_sort_type:
          type: string
          enum:
            - Hot
            - Top
            - New
            - Old
        default_listing_type:
          type: string
          enum:
            - All
            - Local
            - Subscribed
            - Popular
            - Moderating
            - ModeratorView
        default_sort_type:
          type: string
          enum:
            - Active
            - Hot
            - New
            - Top
            - TopHour
            - TopSixHour
            - TopTwelveHour
            - TopDay
            - TopWeek
            - TopMonth
            - TopThreeMonths
            - TopSixMonths
            - TopNineMonths
            - TopYear
            - TopAll
            - Scaled
            - Old
        show_bot_accounts:
          type: boolean
        show_nsfl:
          type: boolean
        show_nsfw:
          type: boolean
        show_read_posts:
          type: boolean
        show_scores:
          type: boolean
      required:
        - default_comment_sort_type
        - default_listing_type
        - show_bot_accounts
        - show_nsfl
        - show_nsfw
        - show_read_posts
        - show_scores
    LocalUserView:
      type: object
      properties:
        counts:
          $ref: '#/components/schemas/PersonAggregates'
        local_user:
          $ref: '#/components/schemas/LocalUser'
        person:
          $ref: '#/components/schemas/Person'
      required:
        - counts
        - local_user
        - person
    CommunityModeratorView:
      type: object
      properties:
        community:
          $ref: '#/components/schemas/Community'
        moderator:
          $ref: '#/components/schemas/Person'
      required:
        - community
        - moderator
    PersonBlockView:
      type: object
      properties:
        person:
          $ref: '#/components/schemas/Person'
        target:
          $ref: '#/components/schemas/Person'
      required:
        - person
        - target
    MyUserInfo:
      type: object
      properties:
        community_blocks:
          type: array
          items:
            $ref: '#/components/schemas/CommunityBlockView'
        discussion_languages:
          type: array
          items:
            $ref: '#/components/schemas/LanguageView'
        follows:
          type: array
          items:
            $ref: '#/components/schemas/CommunityFollowerView'
        instance_blocks:
          type: array
          items:
            $ref: '#/components/schemas/InstanceBlockView'
        local_user_view:
          $ref: '#/components/schemas/LocalUserView'
        moderates:
          type: array
          items:
            $ref: '#/components/schemas/CommunityModeratorView'
        person_blocks:
          type: array
          items:
            $ref: '#/components/schemas/PersonBlockView'
      required:
        - community_blocks
        - discussion_languages
        - follows
        - instance_blocks
        - local_user_view
        - moderates
        - person_blocks
    GetSiteResponse:
      type: object
      properties:
        admins:
          type: array
          items:
            $ref: '#/components/schemas/PersonView'
        site:
          $ref: '#/components/schemas/Site'
        version:
          type: string
          title: Software version
        my_user:
          $ref: '#/components/schemas/MyUserInfo'
      required:
        - admins
        - site
        - version
    GetSiteVersionResponse:
      type: object
      properties:
        version:
          type: string
      required:
        - version
    BlockInstanceRequest:
      type: object
      properties:
        block:
          type: boolean
        instance_id:
          type: integer
      required:
        - block
        - instance_id
    BlockInstanceResponse:
      type: object
      properties:
        blocked:
          type: boolean
      required:
        - blocked
    GetSiteInstanceChooserResponse:
      type: object
      properties:
        language:
          $ref: '#/components/schemas/LanguageView'
        nsfw:
          type: boolean
        newbie_friendly:
          type: boolean
        name:
          type: string
        elevator_pitch:
          type: string
        description:
          type: string
        about:
          type: string
        sidebar:
          type: string
        logo_url:
          type: string
        maturity:
          type: string
        tos_url:
          type: string
        mau:
          type: integer
        can_make_communities:
          type: boolean
        defederation:
          type: array
          items:
            type: string
        trusts:
          type: array
          items:
            type: string
        registration_mode:
          type: string
      required:
        - about
        - can_make_communities
        - defederation
        - description
        - elevator_pitch
        - language
        - logo_url
        - maturity
        - mau
        - name
        - newbie_friendly
        - nsfw
        - registration_mode
        - sidebar
        - tos_url
        - trusts
    GetSiteInstanceChooserSearchResponseItem:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        domain:
          type: string
        elevator_pitch:
          type: string
        description:
          type: string
        about:
          type: string
        sidebar:
          type: string
        logo_url:
          type: string
        maturity:
          type: string
        tos_url:
          type: string
        uptime:
          type: string
        mau:
          type: integer
        can_make_communities:
          type: boolean
        newbie_friendly:
          type: boolean
        defederation:
          type: array
          items:
            type: string
        trusts:
          type: array
          items:
            type: string
        registration_mode:
          type: string
        language:
          type: string
        monthsmonitored:
          type: integer
      required:
        - about
        - can_make_communities
        - defederation
        - description
        - domain
        - elevator_pitch
        - id
        - language
        - logo_url
        - maturity
        - mau
        - monthsmonitored
        - name
        - newbie_friendly
        - registration_mode
        - sidebar
        - tos_url
        - trusts
        - uptime
    GetSiteInstanceChooserSearchResponse:
      type: object
      properties:
        result:
          type: array
          items:
            $ref: '#/components/schemas/GetSiteInstanceChooserSearchResponseItem'
      required:
        - result
    CommunityAggregates:
      type: object
      properties:
        id:
          type: integer
        post_count:
          type: integer
        post_reply_count:
          type: integer
        published:
          type: string
        subscriptions_count:
          type: integer
        total_subscriptions_count:
          type: integer
        active_daily:
          type: integer
        active_weekly:
          type: integer
        active_monthly:
          type: integer
        active_6monthly:
          type: integer
      required:
        - id
        - post_count
        - post_reply_count
        - published
        - subscriptions_count
        - total_subscriptions_count
    CommunityFlair:
      type: object
      properties:
        id:
          type: integer
        community_id:
          type: integer
        flair_title:
          type: string
        text_color:
          type: string
          example: '#000000'
          description: Hex color code for the text of the flair
        background_color:
          type: string
          example: '#DEDDDA'
          description: Hex color code for the background of the flair
        blur_images:
          type: boolean
        ap_id:
          type:
            - string
            - "null"
          format: url
          description: Legacy tags that existed prior to 1.2 and some tags for remote communities might not have a defined ap_id
      required:
        - ap_id
        - background_color
        - blur_images
        - community_id
        - flair_title
        - id
        - text_color
    CommunityView:
      type: object
      properties:
        activity_alert:
          type: boolean
        blocked:
          type: boolean
        community:
          $ref: '#/components/schemas/Community'
        counts:
          $ref: '#/components/schemas/CommunityAggregates'
        subscribed:
          type: string
          enum:
            - Subscribed
            - NotSubscribed
            - Pending
        flair_list:
          type: array
          items:
            $ref: '#/components/schemas/CommunityFlair'
      required:
        - activity_alert
        - blocked
        - community
        - counts
        - subscribed
    PostAggregates:
      type: object
      properties:
        comments:
          type: integer
        downvotes:
          type: integer
        newest_comment_time:
          type: string
          example: "2025-06-07T02:29:07.980084Z"
          format: datetime
        post_id:
          type: integer
        published:
          type: string
          example: "2025-06-07T02:29:07.980084Z"
          format: datetime
        score:
          type: integer
        upvotes:
          type: integer
        cross_posts:
          type: integer
      required:
        - comments
        - cross_posts
        - downvotes
        - newest_comment_time
        - post_id
        - published
        - score
        - upvotes
    WidthHeight:
      type: object
      properties:
        width:
          type: integer
        height:
          type: integer
    MiniCrossPosts:
      type: object
      properties:
        post_id:
          type: integer
        reply_count:
          type: integer
        community_name:
          type: string
    Post:
      type: object
      properties:
        ap_id:
          type: string
          format: url
        community_id:
          type: integer
        deleted:
          type: boolean
        id:
          type: integer
        language_id:
          type: integer
        local:
          type: boolean
        locked:
          type: boolean
        nsfw:
          type: boolean
        published:
          type: string
          example: "2025-06-07T02:29:07.980084Z"
          format: datetime
        removed:
          type: boolean
        sticky:
          type: boolean
        title:
          type: string
        user_id:
          type: integer
        alt_text:
          type: string
        body:
          type: string
          format: markdown
        small_thumbnail_url:
          type: string
          format: url
        thumbnail_url:
          type: string
          format: url
        updated:
          type: string
          example: "2025-06-07T02:29:07.980084Z"
          format: datetime
        url:
          type: string
          format: url
        image_details:
          $ref: '#/components/schemas/WidthHeight'
        cross_posts:
          type: array
          items:
            $ref: '#/components/schemas/MiniCrossPosts'
      required:
        - ap_id
        - community_id
        - deleted
        - id
        - language_id
        - local
        - locked
        - nsfw
        - published
        - removed
        - sticky
        - title
        - user_id
    PostView:
      type: object
      properties:
        banned_from_community:
          type: boolean
        community:
          $ref: '#/components/schemas/Community'
        counts:
          $ref: '#/components/schemas/PostAggregates'
        creator:
          $ref: '#/components/schemas/Person'
        creator_banned_from_community:
          type: boolean
        creator_is_admin:
          type: boolean
        creator_is_moderator:
          type: boolean
        hidden:
          type: boolean
        post:
          $ref: '#/components/schemas/Post'
        read:
          type: boolean
        saved:
          type: boolean
        subscribed:
          type: string
          enum:
            - Subscribed
            - NotSubscribed
            - Pending
        unread_comments:
          type: integer
        activity_alert:
          type: boolean
        my_vote:
          type: integer
        flair_list:
          type: array
          items:
            $ref: '#/components/schemas/CommunityFlair'
      required:
        - banned_from_community
        - community
        - counts
        - creator
        - creator_banned_from_community
        - creator_is_admin
        - creator_is_moderator
        - hidden
        - post
        - read
        - saved
        - subscribed
        - unread_comments
    Comment:
      type: object
      properties:
        ap_id:
          type: string
          format: url
        body:
          type: string
          format: markdown
        deleted:
          type: boolean
        id:
          type: integer
        language_id:
          type: integer
        local:
          type: boolean
        path:
          type: string
        post_id:
          type: integer
        published:
          type: string
          example: "2025-06-07T02:29:07.980084Z"
          format: datetime
        removed:
          type: boolean
        user_id:
          type: integer
        distinguished:
          type: boolean
        updated:
          type: string
          example: "2025-06-07T02:29:07.980084Z"
          format: datetime
        locked:
          type: boolean
      required:
        - ap_id
        - body
        - deleted
        - id
        - language_id
        - local
        - path
        - post_id
        - published
        - removed
        - user_id
    CommentAggregates:
      type: object
      properties:
        child_count:
          type: integer
        comment_id:
          type: integer
        downvotes:
          type: integer
        published:
          type: string
          example: "2025-06-07T02:29:07.980084Z"
          format: datetime
        score:
          type: integer
        upvotes:
          type: integer
      required:
        - child_count
        - comment_id
        - downvotes
        - published
        - score
        - upvotes
    CommentView:
      type: object
      properties:
        activity_alert:
          type: boolean
        banned_from_community:
          type: boolean
        comment:
          $ref: '#/components/schemas/Comment'
        community:
          $ref: '#/components/schemas/Community'
        counts:
          $ref: '#/components/schemas/CommentAggregates'
        creator:
          $ref: '#/components/schemas/Person'
        creator_banned_from_community:
          type: boolean
        creator_blocked:
          type: boolean
        creator_is_admin:
          type: boolean
        creator_is_moderator:
          type: boolean
        post:
          $ref: '#/components/schemas/Post'
        saved:
          type: boolean
        subscribed:
          type: string
        my_vote:
          type: integer
        can_auth_user_moderate:
          type: boolean
      required:
        - activity_alert
        - banned_from_community
        - comment
        - community
        - counts
        - creator
        - creator_banned_from_community
        - creator_blocked
        - creator_is_admin
        - creator_is_moderator
        - post
        - saved
        - subscribed
    SearchResponse:
      type: object
      properties:
        type_:
          type: string
          enum:
            - Communities
            - Posts
            - Users
            - Url
        communities:
          type: array
          items:
            $ref: '#/components/schemas/CommunityView'
        posts:
          type: array
          items:
            $ref: '#/components/schemas/PostView'
        users:
          type: array
          items:
            $ref: '#/components/schemas/PersonView'
        comments:
          type: array
          items:
            $ref: '#/components/schemas/CommentView'
      required:
        - comments
        - communities
        - posts
        - type_
        - users
    ResolveObjectResponse:
      type: object
      properties:
        comment:
          $ref: '#/components/schemas/CommentView'
        post:
          $ref: '#/components/schemas/PostView'
        community:
          $ref: '#/components/schemas/CommunityView'
        person:
          $ref: '#/components/schemas/PersonView'
    InstanceWithoutFederationState:
      type: object
      properties:
        domain:
          type: string
        id:
          type: integer
        published:
          type: string
          example: "2025-06-07T02:29:07.980084Z"
          format: datetime
        software:
          type: string
        updated:
          type: string
          example: "2025-06-07T02:29:07.980084Z"
          format: datetime
        version:
          type: string
      required:
        - domain
        - id
        - published
    FederatedInstancesView:
      type: object
      properties:
        allowed:
          type: array
          items:
            $ref: '#/components/schemas/InstanceWithoutFederationState'
        blocked:
          type: array
          items:
            $ref: '#/components/schemas/InstanceWithoutFederationState'
        linked:
          type: array
          items:
            $ref: '#/components/schemas/InstanceWithoutFederationState'
      required:
        - allowed
        - blocked
        - linked
    GetFederatedInstancesResponse:
      type: object
      properties:
        federated_instances:
          $ref: '#/components/schemas/FederatedInstancesView'
    GetCommunityResponse:
      type: object
      properties:
        community_view:
          $ref: '#/components/schemas/CommunityView'
        discussion_languages:
          type: array
          items:
            type: integer
        moderators:
          type: array
          items:
            $ref: '#/components/schemas/CommunityModeratorView'
        site:
          $ref: '#/components/schemas/Site'
      required:
        - community_view
        - discussion_languages
        - moderators
    ListCommunitiesResponse:
      type: object
      properties:
        communities:
          type: array
          items:
            $ref: '#/components/schemas/CommunityView'
        next_page:
          type:
            - string
            - "null"
      required:
        - communities
    FollowCommunityRequest:
      type: object
      properties:
        community_id:
          type: integer
        follow:
          type: boolean
      required:
        - community_id
        - follow
    CommunityResponse:
      type: object
      properties:
        community_view:
          $ref: '#/components/schemas/CommunityView'
        discussion_languages:
          type: array
          items:
            type: integer
      required:
        - community_view
        - discussion_languages
    BlockCommunityRequest:
      type: object
      properties:
        block:
          type: boolean
        community_id:
          type: integer
      required:
        - block
        - community_id
    BlockCommunityResponse:
      type: object
      properties:
        community_view:
          $ref: '#/components/schemas/CommunityView'
        blocked:
          type: boolean
      required:
        - blocked
        - community_view
    CreateCommunityRequest:
      type: object
      properties:
        name:
          type: string
        title:
          type: string
        banner_url:
          type:
            - string
            - "null"
          format: url
        description:
          type: string
          format: markdown
        discussion_languages:
          type: array
          items:
            type: integer
        icon_url:
          type:
            - string
            - "null"
          format: url
        local_only:
          type: boolean
        nsfw:
          type: boolean
        restricted_to_mods:
          type: boolean
        rules:
          type: string
      required:
        - name
        - title
    EditCommunityRequest:
      type: object
      properties:
        community_id:
          type: integer
        title:
          type: string
        banner_url:
          type:
            - string
            - "null"
          format: url
        description:
          type: string
          format: markdown
        discussion_languages:
          type: array
          items:
            type: integer
        icon_url:
          type:
            - string
            - "null"
          format: url
        local_only:
          type: boolean
        nsfw:
          type: boolean
        restricted_to_mods:
          type: boolean
        rules:
          type: string
      required:
        - community_id
        - title
    SubscribeCommunityRequest:
      type: object
      properties:
        community_id:
          type: integer
        subscribe:
          type: boolean
      required:
        - community_id
        - subscribe
    DeleteCommunityRequest:
      type: object
      properties:
        community_id:
          type: integer
        deleted:
          type: boolean
      required:
        - community_id
        - deleted
    ModCommunityRequest:
      type: object
      properties:
        added:
          type: boolean
        community_id:
          type: integer
        person_id:
          type: integer
      required:
        - added
        - community_id
        - person_id
    ModCommunityResponse:
      type: object
      properties:
        moderators:
          type: array
          items:
            $ref: '#/components/schemas/CommunityModeratorView'
      required:
        - moderators
    CommunityModerationBanItem:
      type: object
      properties:
        banned_by:
          $ref: '#/components/schemas/Person'
        banned_user:
          $ref: '#/components/schemas/Person'
        community:
          $ref: '#/components/schemas/Community'
        expired:
          type: boolean
        expired_at:
          type:
            - string
            - "null"
          example: 2025-06-07T02:29:07.980084Z, null=permanent ban
          format: datetime
        expires_at:
          type:
            - string
            - "null"
          example: 2025-06-07T02:29:07.980084Z, null=permanent ban
          format: datetime
        reason:
          type: string
    CommunityModerationBansListResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/CommunityModerationBanItem'
        next_page:
          type:
            - string
            - "null"
    CommunityModerationUnbanRequest:
      type: object
      properties:
        community_id:
          type: integer
        user_id:
          type: integer
      required:
        - community_id
        - user_id
    CommunityModerationBanRequest:
      type: object
      properties:
        community_id:
          type: integer
        reason:
          type: string
        user_id:
          type: integer
        expires_at:
          type: string
          example: "2025-06-07T02:29:07.980084Z"
          format: datetime
        permanent:
          type: boolean
      required:
        - community_id
        - reason
        - user_id
    CommunityModerationNsfwRequest:
      type: object
      properties:
        post_id:
          type: integer
        nsfw_status:
          type: boolean
      required:
        - nsfw_status
        - post_id
    CommunityFlairCreateRequest:
      type: object
      properties:
        community_id:
          type: integer
        flair_title:
          type: string
        text_color:
          type: string
          default: '#000000'
          example: '#000 or #000000'
          description: Hex color code for the text of the flair.
        background_color:
          type: string
          default: '#DEDDDA'
          example: '#fff or #FFFFFF'
          description: Hex color code for the background of the flair.
        blur_images:
          type: boolean
          default: false
      required:
        - community_id
        - flair_title
    CommunityFlairCreateResponse:
      type: object
      properties:
        id:
          type: integer
        community_id:
          type: integer
        flair_title:
          type: string
        text_color:
          type: string
          example: '#000000'
          description: Hex color code for the text of the flair
        background_color:
          type: string
          example: '#DEDDDA'
          description: Hex color code for the background of the flair
        blur_images:
          type: boolean
        ap_id:
          type:
            - string
            - "null"
          format: url
          description: Legacy tags that existed prior to 1.2 and some tags for remote communities might not have a defined ap_id
      required:
        - ap_id
        - background_color
        - blur_images
        - community_id
        - flair_title
        - id
        - text_color
    CommunityFlairEditRequest:
      type: object
      properties:
        flair_id:
          type: integer
        flair_title:
          type: string
        text_color:
          type: string
          example: '#000 or #000000'
          description: Hex color code for the text of the flair.
        background_color:
          type: string
          example: '#fff or #FFFFFF'
          description: Hex color code for the background of the flair.
        blur_images:
          type: boolean
      required:
        - flair_id
    CommunityFlairEditResponse:
      type: object
      properties:
        id:
          type: integer
        community_id:
          type: integer
        flair_title:
          type: string
        text_color:
          type: string
          example: '#000000'
          description: Hex color code for the text of the flair
        background_color:
          type: string
          example: '#DEDDDA'
          description: Hex color code for the background of the flair
        blur_images:
          type: boolean
        ap_id:
          type:
            - string
            - "null"
          format: url
          description: Legacy tags that existed prior to 1.2 and some tags for remote communities might not have a defined ap_id
      required:
        - ap_id
        - background_color
        - blur_images
        - community_id
        - flair_title
        - id
        - text_color
    CommunityFlairDeleteRequest:
      type: object
      properties:
        flair_id:
          type: integer
      required:
        - flair_id
    CommunityFlairDeleteResponse:
      type: object
      properties:
        community_view:
          $ref: '#/components/schemas/CommunityView'
        discussion_languages:
          type: array
          items:
            type: integer
        moderators:
          type: array
          items:
            $ref: '#/components/schemas/CommunityModeratorView'
        site:
          $ref: '#/components/schemas/Site'
      required:
        - community_view
        - discussion_languages
        - moderators
    FeedView:
      type: object
      properties:
        actor_id:
          type: string
          format: url
        ap_domain:
          type: string
        children:
          type: array
          items:
            $ref: '#/components/schemas/FeedView'
        communities:
          type: array
          items:
            $ref: '#/components/schemas/Community'
        communities_count:
          type: integer
        id:
          type: integer
        is_instance_feed:
          type: boolean
        local:
          type: boolean
        name:
          type: string
        nsfl:
          type: boolean
        nsfw:
          type: boolean
        owner:
          type: boolean
          description: Is the authorized user the creator of the feed?
        public:
          type: boolean
        published:
          type: string
          example: "2025-06-07T02:29:07.980084Z"
          format: datetime
        show_posts_from_children:
          type: boolean
        subscribed:
          type: boolean
        subscriptions_count:
          type: integer
        title:
          type: string
        updated:
          type: string
          example: "2025-06-07T02:29:07.980084Z"
          format: datetime
        user_id:
          type: integer
          description: user_id of the feed creator/owner
        banner:
          type:
            - string
            - "null"
          format: url
        description:
          type:
            - string
            - "null"
          format: markdown
        description_html:
          type:
            - string
            - "null"
          format: html
        icon:
          type:
            - string
            - "null"
          format: url
        parent_feed_id:
          type:
            - integer
            - "null"
      required:
        - actor_id
        - ap_domain
        - children
        - communities
        - communities_count
        - id
        - is_instance_feed
        - local
        - name
        - nsfl
        - nsfw
        - owner
        - public
        - published
        - show_posts_from_children
        - subscribed
        - subscriptions_count
        - title
        - updated
        - user_id
    FeedListResponse:
      type: object
      properties:
        feeds:
          type: array
          items:
            $ref: '#/components/schemas/FeedView'
      required:
        - feeds
    TopicView:
      type: object
      properties:
        children:
          type: array
          items:
            $ref: '#/components/schemas/TopicView'
        communities:
          type: array
          items:
            $ref: '#/components/schemas/Community'
        communities_count:
          type: integer
        id:
          type: integer
        name:
          type: string
        show_posts_from_children:
          type: boolean
        title:
          type: string
        parent_topic_id:
          type:
            - integer
            - "null"
      required:
        - children
        - communities
        - communities_count
        - id
        - name
        - show_posts_from_children
        - title
    TopicListResponse:
      type: object
      properties:
        topics:
          type: array
          items:
            $ref: '#/components/schemas/TopicView'
      required:
        - topics
    GetUserResponse:
      type: object
      properties:
        comments:
          type: array
          items:
            $ref: '#/components/schemas/CommentView'
        moderates:
          type: array
          items:
            $ref: '#/components/schemas/CommunityModeratorView'
        person_view:
          $ref: '#/components/schemas/PersonView'
        posts:
          type: array
          items:
            $ref: '#/components/schemas/PostView'
        site:
          $ref: '#/components/schemas/Site'
      required:
        - comments
        - moderates
        - person_view
        - posts
    UserLoginRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - password
        - username
    UserLoginResponse:
      type: object
      properties:
        jwt:
          type: string
      required:
        - jwt
    UserUnreadCountsResponse:
      type: object
      properties:
        mentions:
          type: integer
          description: Post and comment mentions
        private_messages:
          type: integer
        replies:
          type: integer
          description: Replies to posts and comments
        other:
          type: integer
          description: Any other type of notification (reports, activity alerts, etc.)
      required:
        - mentions
        - other
        - private_messages
        - replies
    CommentReply:
      type: object
      properties:
        id:
          type: integer
        comment_id:
          type: integer
        published:
          type: string
          example: "2025-06-07T02:29:07.980084Z"
          format: datetime
        read:
          type: boolean
        recipient_id:
          type: integer
      required:
        - comment_id
        - id
        - published
        - read
        - recipient_id
    CommentReplyView:
      type: object
      properties:
        activity_alert:
          type: boolean
        comment:
          $ref: '#/components/schemas/Comment'
        comment_reply:
          $ref: '#/components/schemas/CommentReply'
        community:
          $ref: '#/components/schemas/Community'
        counts:
          $ref: '#/components/schemas/CommentAggregates'
        creator:
          $ref: '#/components/schemas/Person'
        creator_banned_from_community:
          type: boolean
        creator_blocked:
          type: boolean
        creator_is_admin:
          type: boolean
        creator_is_moderator:
          type: boolean
        my_vote:
          type: integer
        post:
          $ref: '#/components/schemas/Post'
        recipient:
          $ref: '#/components/schemas/Person'
        saved:
          type: boolean
        subscribed:
          type: string
          enum:
            - Subscribed
            - NotSubscribed
            - Pending
      required:
        - activity_alert
        - comment
        - comment_reply
        - community
        - counts
        - creator
        - creator_banned_from_community
        - creator_blocked
        - creator_is_admin
        - creator_is_moderator
        - my_vote
        - post
        - recipient
        - saved
        - subscribed
    UserRepliesResponse:
      type: object
      properties:
        next_page:
          type:
            - string
            - "null"
        replies:
          type: array
          items:
            $ref: '#/components/schemas/CommentReplyView'
      required:
        - replies
    UserMentionsResponse:
      type: object
      properties:
        next_page:
          type:
            - string
            - "null"
        replies:
          type: array
          items:
            $ref: '#/components/schemas/CommentReplyView'
      required:
        - replies
    UserBlockRequest:
      type: object
      properties:
        block:
          type: boolean
        person_id:
          type: integer
      required:
        - block
        - person_id
    UserBlockResponse:
      type: object
      properties:
        blocked:
          type: boolean
        person_view:
          $ref: '#/components/schemas/PersonView'
      required:
        - blocked
        - person_view
    UserMarkAllReadResponse:
      type: object
      properties:
        replies:
          type: array
          description: Should be empty list
          items:
            $ref: '#/components/schemas/CommentReplyView'
      required:
        - replies
    UserSubscribeRequest:
      type: object
      properties:
        person_id:
          type: integer
        subscribe:
          type: boolean
      required:
        - person_id
        - subscribe
    UserSubscribeResponse:
      type: object
      properties:
        person_view:
          $ref: '#/components/schemas/PersonView'
        subscribed:
          type: boolean
      required:
        - person_view
        - subscribed
    UserSaveSettingsRequest:
      type: object
      properties:
        avatar:
          type:
            - string
            - "null"
          format: url
          description: Pass a null value to remove the image
        bio:
          type: string
          format: markdown
        cover:
          type:
            - string
            - "null"
          format: url
          description: Pass a null value to remove the image
        default_comment_sort_type:
          type: string
          enum:
            - Hot
            - Top
            - New
            - Old
        default_sort_type:
          type: string
          enum:
            - Hot
            - Top
            - New
            - Active
            - Old
            - Scaled
        show_nsfw:
          type: boolean
        show_nsfl:
          type: boolean
        show_read_posts:
          type: boolean
    UserSaveSettingsResponse:
      type: object
      properties:
        my_user:
          $ref: '#/components/schemas/MyUserInfo'
    UserNotificationsCounts:
      type: object
      properties:
        unread:
          type: integer
        read:
          type: integer
        total:
          type: integer
      required:
        - read
        - total
        - unread
    UserNotificationItemView:
      type: object
      properties:
        author:
          description: returned for all notif types
          $ref: '#/components/schemas/Person'
        notif_body:
          type: string
          description: returned for all notif types
        notif_id:
          type: integer
          description: returned for all notif types
        notif_subtype:
          type: string
          description: returned for all notif types
        notif_type:
          type: integer
          description: returned for all notif types
        status:
          type: string
          enum:
            - Unread
            - Read
          description: returned for all notif types
        comment:
          description: 'returned for notif_types: 3, 4, 6 (comment_mention subtype)'
          $ref: '#/components/schemas/Comment'
        comment_id:
          type: integer
          description: 'returned for notif_types: 3, 4, 6 (comment_mention subtype)'
        community:
          description: returned for notif_type 1
          $ref: '#/components/schemas/Community'
        post:
          description: 'returned for notif_types: 0, 1, 2, 3, 4, 5, 6 (post_mention subtype)'
          $ref: '#/components/schemas/PostView'
        post_id:
          type: integer
          description: 'returned for notif_types: 0, 1, 2, 3, 4, 5, 6 (post_mention subtype)'
      required:
        - author
        - notif_body
        - notif_id
        - notif_subtype
        - notif_type
        - status
    UserNotificationsResponse:
      type: object
      properties:
        counts:
          $ref: '#/components/schemas/UserNotificationsCounts'
        items:
          type: array
          items:
            $ref: '#/components/schemas/UserNotificationItemView'
        status:
          type: string
          enum:
            - All
            - Unread
            - Read
        username:
          type: string
        next_page:
          type:
            - string
            - "null"
      required:
        - counts
        - items
        - status
        - username
    UserNotificationStateRequest:
      type: object
      properties:
        notif_id:
          type: integer
        read_state:
          type: boolean
          description: true sets notification as read, false marks it unread
      required:
        - notif_id
        - read_state
    UserNotificationsCountResponse:
      type: object
      properties:
        count:
          type: integer
      required:
        - count
    UserMarkAllNotifsReadResponse:
      type: object
      properties:
        mark_all_notifications_as_read:
          type: string
          example: complete
      required:
        - mark_all_notifications_as_read
    UserSetFlairRequest:
      type: object
      properties:
        community_id:
          type: integer
        flair_text:
          type:
            - string
            - "null"
          description: Either omit or set to null to remove existing flair
      required:
        - community_id
    UserSetFlairResponse:
      type: object
      properties:
        person_view:
          $ref: '#/components/schemas/PersonView'
    ListCommentsResponse:
      type: object
      properties:
        comments:
          type: array
          items:
            $ref: '#/components/schemas/CommentView'
        next_page:
          type:
            - string
            - "null"
      required:
        - comments
    LikeCommentRequest:
      type: object
      properties:
        comment_id:
          type: integer
        score:
          type: integer
          example: 1
          description: -1 to downvote, 1 to upvote, 0 to revert previous vote
        private:
          type: boolean
          default: false
          description: private votes are not federated to other instances
      required:
        - comment_id
        - score
    GetCommentResponse:
      type: object
      properties:
        comment_view:
          $ref: '#/components/schemas/CommentView'
      required:
        - comment_view
    SaveCommentRequest:
      type: object
      properties:
        comment_id:
          type: integer
        save:
          type: boolean
      required:
        - comment_id
        - save
    SubscribeCommentRequest:
      type: object
      properties:
        comment_id:
          type: integer
        subscribe:
          type: boolean
      required:
        - comment_id
        - subscribe
    CreateCommentRequest:
      type: object
      properties:
        body:
          type: string
        post_id:
          type: integer
        parent_id:
          type: integer
        language_id:
          type: integer
      required:
        - body
        - post_id
    EditCommentRequest:
      type: object
      properties:
        body:
          type: string
        comment_id:
          type: integer
        language_id:
          type: integer
        distinguished:
          type: boolean
          default: false
          description: Visibly mark reply as from a moderator in the web UI
      required:
        - body
        - comment_id
    DeleteCommentRequest:
      type: object
      properties:
        comment_id:
          type: integer
        deleted:
          type: boolean
      required:
        - comment_id
        - deleted
    ReportCommentRequest:
      type: object
      properties:
        comment_id:
          type: integer
        reason:
          type: string
        description:
          type: string
        report_remote:
          type: boolean
          default: true
          description: Also send report to originating instance
      required:
        - comment_id
        - reason
    CommentReport:
      type: object
      properties:
        id:
          type: integer
        creator_id:
          type: integer
        comment_id:
          type: integer
        original_comment_text:
          type: string
        reason:
          type: string
        resolved:
          type: boolean
        published:
          type: string
          example: "2025-06-07T02:29:07.980084Z"
          format: datetime
        updated:
          type: string
          example: "2025-06-07T02:29:07.980084Z"
          format: datetime
      required:
        - comment_id
        - creator_id
        - id
        - published
        - resolved
    CommentReportView:
      type: object
      properties:
        activity_alert:
          type: boolean
        banned_from_community:
          type: boolean
        comment:
          $ref: '#/components/schemas/Comment'
        community:
          $ref: '#/components/schemas/Community'
        counts:
          $ref: '#/components/schemas/CommentAggregates'
        creator:
          $ref: '#/components/schemas/Person'
        creator_banned_from_community:
          type: boolean
        creator_blocked:
          type: boolean
        creator_is_admin:
          type: boolean
        creator_is_moderator:
          type: boolean
        post:
          $ref: '#/components/schemas/Post'
        saved:
          type: boolean
        subscribed:
          type: string
        my_vote:
          type: integer
        can_auth_user_moderate:
          type: boolean
        comment_report:
          $ref: '#/components/schemas/CommentReport'
        comment_creator:
          $ref: '#/components/schemas/Person'
      required:
        - activity_alert
        - banned_from_community
        - comment
        - comment_creator
        - comment_report
        - community
        - counts
        - creator
        - creator_banned_from_community
        - creator_blocked
        - creator_is_admin
        - creator_is_moderator
        - post
        - saved
        - subscribed
    GetCommentReportResponse:
      type: object
      properties:
        comment_report_view:
          $ref: '#/components/schemas/CommentReportView'
      required:
        - comment_report_view
    RemoveCommentRequest:
      type: object
      properties:
        comment_id:
          type: integer
        removed:
          type: boolean
        reason:
          type: string
      required:
        - comment_id
        - removed
    MarkCommentAsReadRequest:
      type: object
      properties:
        comment_reply_id:
          type: integer
        read:
          type: boolean
      required:
        - comment_reply_id
        - read
    GetCommentReplyResponse:
      type: object
      properties:
        comment_reply_view:
          $ref: '#/components/schemas/CommentReplyView'
      required:
        - comment_reply_view
    LockCommentRequest:
      type: object
      properties:
        comment_id:
          type: integer
        locked:
          type: boolean
      required:
        - comment_id
        - locked
    CommentLikeView:
      type: object
      properties:
        score:
          type: integer
        creator_banned_from_community:
          type: boolean
        creator_banned:
          type: boolean
        creator:
          $ref: '#/components/schemas/Person'
      required:
        - creator
        - creator_banned
        - creator_banned_from_community
        - score
    ListCommentLikesResponse:
      type: object
      properties:
        comment_likes:
          type: array
          items:
            $ref: '#/components/schemas/CommentLikeView'
        next_page:
          type:
            - string
            - "null"
      required:
        - comment_likes
    ListPostsResponse:
      type: object
      properties:
        posts:
          type: array
          items:
            $ref: '#/components/schemas/PostView'
        next_page:
          type:
            - string
            - "null"
      required:
        - posts
      additionalProperties: false
    GetPostResponse:
      type: object
      properties:
        post_view:
          $ref: '#/components/schemas/PostView'
        community_view:
          $ref: '#/components/schemas/CommunityView'
        moderators:
          type: array
          items:
            $ref: '#/components/schemas/CommunityModeratorView'
        cross_posts:
          type: array
          items:
            $ref: '#/components/schemas/PostView'
      required:
        - post_view
    PostReplyView:
      type: object
      properties:
        activity_alert:
          type: boolean
        banned_from_community:
          type: boolean
        comment:
          $ref: '#/components/schemas/Comment'
        community:
          $ref: '#/components/schemas/Community'
        counts:
          $ref: '#/components/schemas/CommentAggregates'
        creator:
          $ref: '#/components/schemas/Person'
        creator_banned_from_community:
          type: boolean
        creator_blocked:
          type: boolean
        creator_is_admin:
          type: boolean
        creator_is_moderator:
          type: boolean
        post:
          $ref: '#/components/schemas/Post'
        saved:
          type: boolean
        subscribed:
          type: string
        my_vote:
          type: integer
        can_auth_user_moderate:
          type: boolean
        replies:
          type: array
          items:
            $ref: '#/components/schemas/PostReplyView'
      required:
        - activity_alert
        - banned_from_community
        - comment
        - counts
        - creator
        - creator_banned_from_community
        - creator_blocked
        - creator_is_admin
        - creator_is_moderator
        - saved
        - subscribed
    GetPostRepliesResponse:
      type: object
      properties:
        comments:
          type: array
          items:
            $ref: '#/components/schemas/PostReplyView'
        next_page:
          type:
            - string
            - "null"
    LikePostRequest:
      type: object
      properties:
        post_id:
          type: integer
        score:
          type: integer
        private:
          type: boolean
        auth:
          type: string
      required:
        - post_id
        - score
      additionalProperties: false
    SavePostRequest:
      type: object
      properties:
        post_id:
          type: integer
        save:
          type: boolean
      required:
        - post_id
        - save
    SubscribePostRequest:
      type: object
      properties:
        post_id:
          type: integer
        subscribe:
          type: boolean
      required:
        - post_id
        - subscribe
    CreatePostRequest:
      type: object
      properties:
        title:
          type: string
        community_id:
          type: integer
        body:
          type: string
        url:
          type: string
          format: url
        nsfw:
          type: boolean
        language_id:
          type: integer
      required:
        - community_id
        - title
    EditPostRequest:
      type: object
      properties:
        post_id:
          type: integer
        title:
          type: string
        body:
          type: string
        url:
          type: string
          format: url
        nsfw:
          type: boolean
        language_id:
          type: integer
      required:
        - post_id
    DeletePostRequest:
      type: object
      properties:
        post_id:
          type: integer
        deleted:
          type: boolean
      required:
        - deleted
        - post_id
    ReportPostRequest:
      type: object
      properties:
        post_id:
          type: integer
        reason:
          type: string
      required:
        - post_id
        - reason
    PostReport:
      type: object
      properties:
        id:
          type: integer
        creator_id:
          type: integer
        post_id:
          type: integer
        original_post_name:
          type: string
        original_post_body:
          type: string
        reason:
          type: string
        resolved:
          type: boolean
        published:
          type: string
          example: "2025-06-07T02:29:07.980084Z"
          format: datetime
      required:
        - creator_id
        - id
        - original_post_body
        - original_post_name
        - post_id
        - reason
        - resolved
    PostReportView:
      type: object
      properties:
        post_report:
          $ref: '#/components/schemas/PostReport'
        post:
          $ref: '#/components/schemas/Post'
        community:
          $ref: '#/components/schemas/Community'
        creator:
          $ref: '#/components/schemas/Person'
        post_creator:
          $ref: '#/components/schemas/Person'
        counts:
          $ref: '#/components/schemas/PostAggregates'
        creator_banned_from_community:
          type: boolean
        creator_is_moderator:
          type: boolean
        creator_is_admin:
          type: boolean
        creator_blocked:
          type: boolean
        subscribed:
          type: string
          enum:
            - Subscribed
            - NotSubscribed
            - Pending
        saved:
          type: boolean
      required:
        - community
        - counts
        - creator
        - creator_banned_from_community
        - creator_blocked
        - creator_is_admin
        - creator_is_moderator
        - post
        - post_creator
        - post_report
        - saved
        - subscribed
    PostReportResponse:
      type: object
      properties:
        post_report_view:
          $ref: '#/components/schemas/PostReportView'
      required:
        - post_report_view
    LockPostRequest:
      type: object
      properties:
        post_id:
          type: integer
        locked:
          type: boolean
      required:
        - locked
        - post_id
    FeaturePostRequest:
      type: object
      properties:
        post_id:
          type: integer
        featured:
          type: boolean
        feature_type:
          type: string
      required:
        - feature_type
        - featured
        - post_id
    RemovePostRequest:
      type: object
      properties:
        post_id:
          type: integer
        removed:
          type: boolean
        reason:
          type: string
      required:
        - post_id
        - removed
    MarkPostAsReadRequest:
      type: object
      properties:
        read:
          type: boolean
        post_id:
          type: integer
        post_ids:
          type: array
          items:
            type: integer
      required:
        - read
    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
      required:
        - success
    PostLikeView:
      type: object
      properties:
        score:
          type: integer
        creator_banned_from_community:
          type: boolean
        creator_banned:
          type: boolean
        creator:
          $ref: '#/components/schemas/Person'
      required:
        - creator
        - creator_banned
        - creator_banned_from_community
        - score
    ListPostLikesResponse:
      type: object
      properties:
        post_likes:
          type: array
          items:
            $ref: '#/components/schemas/PostLikeView'
        next_page:
          type:
            - string
            - "null"
      required:
        - post_likes
    PostSetFlairRequest:
      type: object
      properties:
        post_id:
          type: integer
        flair_id_list:
          type:
            - array
            - "null"
          description: A list of all the flair id to assign to the post. Either pass an empty list or null to remove flair
          items:
            type: integer
      required:
        - post_id
    PostSetFlairResponse:
      type: object
      properties:
        banned_from_community:
          type: boolean
        community:
          $ref: '#/components/schemas/Community'
        counts:
          $ref: '#/components/schemas/PostAggregates'
        creator:
          $ref: '#/components/schemas/Person'
        creator_banned_from_community:
          type: boolean
        creator_is_admin:
          type: boolean
        creator_is_moderator:
          type: boolean
        hidden:
          type: boolean
        post:
          $ref: '#/components/schemas/Post'
        read:
          type: boolean
        saved:
          type: boolean
        subscribed:
          type: string
          enum:
            - Subscribed
            - NotSubscribed
            - Pending
        unread_comments:
          type: integer
        activity_alert:
          type: boolean
        my_vote:
          type: integer
        flair_list:
          type: array
          items:
            $ref: '#/components/schemas/CommunityFlair'
      required:
        - banned_from_community
        - community
        - counts
        - creator
        - creator_banned_from_community
        - creator_is_admin
        - creator_is_moderator
        - hidden
        - post
        - read
        - saved
        - subscribed
        - unread_comments
    ImageUploadRequest:
      type: object
      properties:
        file:
          type: string
          format: binary
      required:
        - file
    ImageUploadResponse:
      type: object
      properties:
        url:
          type: string
          format: url
        liked_only:
          type: boolean
        saved_only:
          type: boolean
        q:
          type: string
      required:
        - url
    PrivateMessage:
      type: object
      properties:
        id:
          type: integer
        creator_id:
          type: integer
        recipient_id:
          type: integer
        content:
          type: string
        deleted:
          type: boolean
        read:
          type: boolean
        published:
          type: string
          example: "2025-06-07T02:29:07.980084Z"
          format: datetime
        ap_id:
          type: string
          format: url
        local:
          type: boolean
      required:
        - ap_id
        - content
        - creator_id
        - deleted
        - id
        - local
        - published
        - read
        - recipient_id
    PrivateMessageView:
      type: object
      properties:
        private_message:
          $ref: '#/components/schemas/PrivateMessage'
        creator:
          $ref: '#/components/schemas/Person'
        recipient:
          $ref: '#/components/schemas/Person'
      required:
        - creator
        - private_message
        - recipient
    ListPrivateMessagesResponse:
      type: object
      properties:
        private_messages:
          type: array
          items:
            $ref: '#/components/schemas/PrivateMessageView'
      required:
        - private_messages
    GetPrivateMessageConversationResponse:
      type: object
      properties:
        private_messages:
          type: array
          items:
            $ref: '#/components/schemas/PrivateMessageView'
      required:
        - private_messages
    CreatePrivateMessageRequest:
      type: object
      properties:
        content:
          type: string
        recipient_id:
          type: integer
      required:
        - content
        - recipient_id
    PrivateMessageResponse:
      type: object
      properties:
        private_message_view:
          $ref: '#/components/schemas/PrivateMessageView'
      required:
        - private_message_view
    EditPrivateMessageRequest:
      type: object
      properties:
        private_message_id:
          type: integer
        content:
          type: string
      required:
        - content
        - private_message_id
    MarkPrivateMessageAsReadRequest:
      type: object
      properties:
        private_message_id:
          type: integer
        read:
          type: boolean
      required:
        - private_message_id
        - read
    DeletePrivateMessageRequest:
      type: object
      properties:
        private_message_id:
          type: integer
        deleted:
          type: boolean
      required:
        - deleted
        - private_message_id
    ReportPrivateMessageRequest:
      type: object
      properties:
        private_message_id:
          type: integer
        reason:
          type: string
      required:
        - private_message_id
        - reason
  responses:
    UNPROCESSABLE_CONTENT:
      description: Unprocessable Content
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
servers:
  - url: https://crust.piefed.social
    description: This instance
  - url: https://crust.piefed.social
    description: Development instance
  - url: https://piefed.social
  - url: https://preferred.social
  - url: https://feddit.online
  - url: https://piefed.world
info:
  title: PieFed 1.2 Alpha API
  contact:
    name: Developer
    url: https://codeberg.org/rimu/pyfedi
  license:
    name: AGPLv3
    url: https://www.gnu.org/licenses/agpl-3.0.en.html#license-text
  version: alpha 1.2
paths:
  /api/alpha/site:
    get:
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSiteResponse'
      tags:
        - Site
      summary: Gets the site, and your user data.
  /api/alpha/site/version:
    get:
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSiteVersionResponse'
      tags:
        - Site
      summary: Gets version of PieFed.
  /api/alpha/site/block:
    post:
      responses:
        "422":
          $ref: '#/components/responses/UNPROCESSABLE_CONTENT'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockInstanceResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlockInstanceRequest'
      tags:
        - Site
      summary: Block an instance.
  /api/alpha/site/instance_chooser:
    get:
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSiteInstanceChooserResponse'
      tags:
        - Site
      summary: Gets the site info for use by other instances in the Instance Chooser functionality.
  /api/alpha/site/instance_chooser_search:
    get:
      parameters:
        - in: query
          name: q
          schema:
            type: string
          required: false
        - in: query
          name: nsfw
          schema:
            type: string
          required: false
        - in: query
          name: language
          schema:
            type: string
          required: false
        - in: query
          name: newbie
          schema:
            type: string
          required: false
      responses:
        "422":
          $ref: '#/components/responses/UNPROCESSABLE_CONTENT'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSiteInstanceChooserSearchResponse'
      tags:
        - Site
      summary: Search for other instances.
  /api/alpha/search:
    get:
      parameters:
        - in: query
          name: q
          schema:
            type: string
          required: true
        - in: query
          name: type_
          schema:
            type: string
            enum:
              - Communities
              - Posts
              - Users
              - Url
          required: true
        - in: query
          name: limit
          schema:
            type: integer
          required: false
        - in: query
          name: listing_type
          schema:
            type: string
            enum:
              - All
              - Local
              - Subscribed
              - Popular
              - Moderating
              - ModeratorView
          required: false
        - in: query
          name: page
          schema:
            type: integer
          required: false
        - in: query
          name: sort
          schema:
            type: string
            enum:
              - Active
              - Hot
              - New
              - Top
              - TopHour
              - TopSixHour
              - TopTwelveHour
              - TopDay
              - TopWeek
              - TopMonth
              - TopThreeMonths
              - TopSixMonths
              - TopNineMonths
              - TopYear
              - TopAll
              - Scaled
              - Old
          required: false
        - in: query
          name: community_name
          schema:
            type: string
          required: false
        - in: query
          name: community_id
          schema:
            type: integer
          required: false
      responses:
        "422":
          $ref: '#/components/responses/UNPROCESSABLE_CONTENT'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponse'
      tags:
        - Misc
      summary: Search PieFed.
  /api/alpha/resolve_object:
    get:
      parameters:
        - in: query
          name: q
          schema:
            type: string
          required: true
      responses:
        "422":
          $ref: '#/components/responses/UNPROCESSABLE_CONTENT'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResolveObjectResponse'
      tags:
        - Misc
      summary: Fetch a non-local / federated object.
  /api/alpha/federated_instances:
    get:
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFederatedInstancesResponse'
      tags:
        - Misc
      summary: Fetch federated instances.
  /api/alpha/community:
    get:
      parameters:
        - in: query
          name: id
          schema:
            type: integer
          required: false
        - in: query
          name: name
          schema:
            type: string
          required: false
      responses:
        "422":
          $ref: '#/components/responses/UNPROCESSABLE_CONTENT'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCommunityResponse'
      tags:
        - Community
      summary: Get / fetch a community.
    post:
      responses:
        "422":
          $ref: '#/components/responses/UNPROCESSABLE_CONTENT'
        "429":
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommunityResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCommunityRequest'
      tags:
        - Community
      summary: Create a new community.
    put:
      responses:
        "422":
          $ref: '#/components/responses/UNPROCESSABLE_CONTENT'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommunityResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditCommunityRequest'
      tags:
        - Community
      summary: Edit community.
  /api/alpha/community/list:
    get:
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
          required: false
        - in: query
          name: page
          schema:
            type: integer
          required: false
        - in: query
          name: show_nsfw
          schema:
            type: boolean
          required: false
        - in: query
          name: sort
          schema:
            type: string
            enum:
              - Hot
              - Top
              - New
          required: false
        - in: query
          name: type_
          schema:
            type: string
            enum:
              - All
              - Local
              - Subscribed
          required: false
      responses:
        "422":
          $ref: '#/components/responses/UNPROCESSABLE_CONTENT'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCommunitiesResponse'
      tags:
        - Community
      summary: List communities, with various filters.
  /api/alpha/community/follow:
    post:
      responses:
        "422":
          $ref: '#/components/responses/UNPROCESSABLE_CONTENT'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommunityResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FollowCommunityRequest'
      tags:
        - Community
      summary: Follow / subscribe to a community.
  /api/alpha/community/block:
    post:
      responses:
        "422":
          $ref: '#/components/responses/UNPROCESSABLE_CONTENT'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockCommunityResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlockCommunityRequest'
      tags:
        - Community
      summary: Block a community.
  /api/alpha/community/subscribe:
    put:
      responses:
        "422":
          $ref: '#/components/responses/UNPROCESSABLE_CONTENT'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommunityResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscribeCommunityRequest'
      tags:
        - Community
      summary: Subscribe to activities in a community.
  /api/alpha/community/delete:
    post:
      responses:
        "422":
          $ref: '#/components/responses/UNPROCESSABLE_CONTENT'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommunityResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteCommunityRequest'
      tags:
        - Community
      summary: Delete a community.
  /api/alpha/community/mod:
    post:
      responses:
        "422":
          $ref: '#/components/responses/UNPROCESSABLE_CONTENT'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModCommunityResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModCommunityRequest'
      tags:
        - Community
      summary: Add or remove a moderator for your community.
  /api/alpha/community/moderate/bans:
    get:
      parameters:
        - in: query
          name: community_id
          schema:
            type: integer
          required: true
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          required: false
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          required: false
      responses:
        "422":
          $ref: '#/components/responses/UNPROCESSABLE_CONTENT'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommunityModerationBansListResponse'
      tags:
        - Community
      summary: Get the list of banned users for a community.
  /api/alpha/community/moderate/unban:
    put:
      responses:
        "422":
          $ref: '#/components/responses/UNPROCESSABLE_CONTENT'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommunityModerationBanItem'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommunityModerationUnbanRequest'
      tags:
        - Community
      summary: Unban a user from a community.
  /api/alpha/community/moderate/ban:
    post:
      responses:
        "422":
          $ref: '#/components/responses/UNPROCESSABLE_CONTENT'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommunityModerationBanItem'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommunityModerationBanRequest'
      tags:
        - Community
      summary: Ban a user from a community.
  /api/alpha/community/moderate/post/nsfw:
    post:
      responses:
        "422":
          $ref: '#/components/responses/UNPROCESSABLE_CONTENT'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostView'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommunityModerationNsfwRequest'
      tags:
        - Community
      summary: Mark or unmark a post as NSFW.
  /api/alpha/community/flair:
    post:
      responses:
        "422":
          $ref: '#/components/responses/UNPROCESSABLE_CONTENT'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommunityFlairCreateResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommunityFlairCreateRequest'
      tags:
        - Community
      summary: Create a new post flair in the community
    put:
      responses:
        "422":
          $ref: '#/components/responses/UNPROCESSABLE_CONTENT'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommunityFlairEditResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommunityFlairEditRequest'
      tags:
        - Community
      summary: Edit an existing post flair in the community
  /api/alpha/community/flair/delete:
    post:
      responses:
        "422":
          $ref: '#/components/responses/UNPROCESSABLE_CONTENT'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommunityFlairDeleteResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommunityFlairDeleteRequest'
      tags:
        - Community
      summary: Delete a post flair in a community
  /api/alpha/feed/list:
    get:
      parameters:
        - in: query
          name: include_communities
          description: include list of communities in each feed with result
          schema:
            type: boolean
            default: true
          required: false
        - in: query
          name: mine_only
          description: only return feeds created by the authorized user
          schema:
            type: boolean
            default: false
          required: false
      responses:
        "422":
          $ref: '#/components/responses/UNPROCESSABLE_CONTENT'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedListResponse'
      tags:
        - Feed
      summary: Get list of feeds
  /api/alpha/topic/list:
    get:
      parameters:
        - in: query
          name: include_communities
          description: include list of communities in each topic with result
          schema:
            type: boolean
            default: true
          required: false
      responses:
        "422":
          $ref: '#/components/responses/UNPROCESSABLE_CONTENT'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopicListResponse'
      tags:
        - Topic
      summary: Get list of topics
  /api/alpha/user:
    get:
      parameters:
        - in: query
          name: person_id
          description: One of either person_id or username must be specified
          schema:
            type: integer
          required: false
        - in: query
          name: username
          description: One of either person_id or username must be specified
          schema:
            type: string
          required: false
        - in: query
          name: sort
          schema:
            type: string
            enum:
              - Active
              - Hot
              - New
              - Top
              - TopHour
              - TopSixHour
              - TopTwelveHour
              - TopDay
              - TopWeek
              - TopMonth
              - TopThreeMonths
              - TopSixMonths
              - TopNineMonths
              - TopYear
              - TopAll
              - Scaled
              - Old
          required: false
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          required: false
        - in: query
          name: limit
          schema:
            type: integer
            default: 20
          required: false
        - in: query
          name: community_id
          description: Limit posts/comments to just a single community
          schema:
            type: integer
          required: false
        - in: query
          name: saved_only
          schema:
            type: boolean
            default: false
          required: false
        - in: query
          name: include_content
          schema:
            type: boolean
            default: false
          required: false
      responses:
        "422":
          $ref: '#/components/responses/UNPROCESSABLE_CONTENT'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserResponse'
      tags:
        - User
      summary: Get the details for a person
  /api/alpha/user/login:
    post:
      responses:
        "422":
          $ref: '#/components/responses/UNPROCESSABLE_CONTENT'
        "429":
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLoginResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginRequest'
      tags:
        - User
      summary: Log into PieFed
  /api/alpha/user/unread_count:
    get:
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserUnreadCountsResponse'
      tags:
        - User
      summary: Get your unread counts
  /api/alpha/user/replies:
    get:
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          required: false
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          required: false
        - in: query
          name: sort
          schema:
            type: string
            default: New
            enum:
              - Hot
              - Top
              - New
              - Old
          required: false
        - in: query
          name: unread_only
          schema:
            type: boolean
            default: true
          required: false
      responses:
        "422":
          $ref: '#/components/responses/UNPROCESSABLE_CONTENT'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRepliesResponse'
      tags:
        - User
      summary: Get comment replies
  /api/alpha/user/mentions:
    get:
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          required: false
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          required: false
        - in: query
          name: sort
          schema:
            type: string
            default: New
            enum:
              - Hot
              - Top
              - New
              - Old
          required: false
        - in: query
          name: unread_only
          schema:
            type: boolean
            default: true
          required: false
      responses:
        "422":
          $ref: '#/components/responses/UNPROCESSABLE_CONTENT'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserMentionsResponse'
      tags:
        - User
      summary: Get mentions of your account made in comments
  /api/alpha/user/block:
    post:
      responses:
        "422":
          $ref: '#/components/responses/UNPROCESSABLE_CONTENT'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserBlockResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserBlockRequest'
      tags:
        - User
      summary: Block or unblock a person
  /api/alpha/user/mark_all_as_read:
    post:
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserMarkAllReadResponse'
      tags:
        - User
      summary: Mark all notifications and messages as read
  /api/alpha/user/subscribe:
    put:
      responses:
        "422":
          $ref: '#/components/responses/UNPROCESSABLE_CONTENT'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSubscribeResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSubscribeRequest'
      tags:
        - User
      summary: Subscribe or unsubscribe to activites of another user
  /api/alpha/user/save_user_settings:
    put:
      responses:
        "422":
          $ref: '#/components/responses/UNPROCESSABLE_CONTENT'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSaveSettingsResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSaveSettingsRequest'
      tags:
        - User
      summary: Save your user settings
  /api/alpha/user/notifications:
    get:
      parameters:
        - in: query
          name: status
          schema:
            type: string
            enum:
              - All
              - Unread
              - Read
          required: true
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          required: false
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          required: false
      responses:
        "422":
          $ref: '#/components/responses/UNPROCESSABLE_CONTENT'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotificationsResponse'
      tags:
        - User
      summary: Get your user notifications (not all notification types supported yet)
  /api/alpha/user/notification_state:
    put:
      responses:
        "422":
          $ref: '#/components/responses/UNPROCESSABLE_CONTENT'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotificationItemView'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserNotificationStateRequest'
      tags:
        - User
      summary: Set the read status of a given notification (not all notification types supported yet)
  /api/alpha/user/notifications_count:
    get:
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotificationsCountResponse'
      tags:
        - User
      summary: Get user unread notifications count
  /api/alpha/user/mark_all_notifications_read:
    put:
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserMarkAllNotifsReadResponse'
      tags:
        - User
      summary: Mark all notifications as read
  /api/alpha/user/verify_credentials:
    post:
      responses:
        "422":
          $ref: '#/components/responses/UNPROCESSABLE_CONTENT'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "200":
          description: OK
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginRequest'
      tags:
        - User
      summary: Verify username/password credentials
  /api/alpha/user/set_flair:
    post:
      responses:
        "422":
          $ref: '#/components/responses/UNPROCESSABLE_CONTENT'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSetFlairResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSetFlairRequest'
      tags:
        - User
      summary: Set your flair for a community
  /api/alpha/comment/list:
    get:
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          required: false
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          required: false
        - in: query
          name: sort
          schema:
            type: string
            default: New
            enum:
              - Hot
              - Top
              - New
              - Old
          required: false
        - in: query
          name: liked_only
          schema:
            type: boolean
          required: false
        - in: query
          name: saved_only
          schema:
            type: boolean
          required: false
        - in: query
          name: person_id
          schema:
            type: integer
          required: false
        - in: query
          name: community_id
          schema:
            type: integer
          required: false
        - in: query
          name: post_id
          schema:
            type: integer
          required: false
        - in: query
          name: parent_id
          schema:
            type: integer
          required: false
        - in: query
          name: max_depth
          schema:
            type: integer
          required: false
        - in: query
          name: depth_first
          description: guarantee parent comments are on the same page as any fetched comments
          schema:
            type: boolean
          required: false
      responses:
        "422":
          $ref: '#/components/responses/UNPROCESSABLE_CONTENT'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCommentsResponse'
      tags:
        - Comment
      summary: List comments, with various filters.
  /api/alpha/comment/like:
    post:
      responses:
        "422":
          $ref: '#/components/responses/UNPROCESSABLE_CONTENT'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCommentResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LikeCommentRequest'
      tags:
        - Comment
      summary: Like / vote on a comment.
  /api/alpha/comment/save:
    put:
      responses:
        "422":
          $ref: '#/components/responses/UNPROCESSABLE_CONTENT'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCommentResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SaveCommentRequest'
      tags:
        - Comment
      summary: Save a comment.
  /api/alpha/comment/subscribe:
    put:
      responses:
        "422":
          $ref: '#/components/responses/UNPROCESSABLE_CONTENT'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCommentResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscribeCommentRequest'
      tags:
        - Comment
      summary: Subscribe to a comment.
  /api/alpha/comment:
    post:
      responses:
        "422":
          $ref: '#/components/responses/UNPROCESSABLE_CONTENT'
        "429":
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCommentResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCommentRequest'
      tags:
        - Comment
      summary: Create a comment.
    put:
      responses:
        "422":
          $ref: '#/components/responses/UNPROCESSABLE_CONTENT'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCommentResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditCommentRequest'
      tags:
        - Comment
      summary: Edit a comment.
    get:
      parameters:
        - in: query
          name: id
          schema:
            type: integer
          required: true
      responses:
        "422":
          $ref: '#/components/responses/UNPROCESSABLE_CONTENT'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCommentResponse'
      tags:
        - Comment
      summary: Get / fetch a comment.
  /api/alpha/comment/delete:
    post:
      responses:
        "422":
          $ref: '#/components/responses/UNPROCESSABLE_CONTENT'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCommentResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteCommentRequest'
      tags:
        - Comment
      summary: Delete a comment.
  /api/alpha/comment/report:
    post:
      responses:
        "422":
          $ref: '#/components/responses/UNPROCESSABLE_CONTENT'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCommentReportResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReportCommentRequest'
      tags:
        - Comment
      summary: Report a comment.
  /api/alpha/comment/remove:
    post:
      responses:
        "422":
          $ref: '#/components/responses/UNPROCESSABLE_CONTENT'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCommentResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoveCommentRequest'
      tags:
        - Comment
      summary: Remove a comment as a moderator.
  /api/alpha/comment/mark_as_read:
    post:
      responses:
        "422":
          $ref: '#/components/responses/UNPROCESSABLE_CONTENT'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCommentReplyResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MarkCommentAsReadRequest'
      tags:
        - Comment
      summary: Mark a comment reply as read.
  /api/alpha/comment/lock:
    post:
      responses:
        "422":
          $ref: '#/components/responses/UNPROCESSABLE_CONTENT'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCommentResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LockCommentRequest'
      tags:
        - Comment
      summary: Lock a comment chain as a moderator.
  /api/alpha/comment/like/list:
    get:
      parameters:
        - in: query
          name: comment_id
          schema:
            type: integer
          required: true
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          required: false
        - in: query
          name: limit
          schema:
            type: integer
            default: 50
          required: false
      responses:
        "422":
          $ref: '#/components/responses/UNPROCESSABLE_CONTENT'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCommentLikesResponse'
      tags:
        - Comment
      summary: View comment votes as a moderator.
  /api/alpha/post/list:
    get:
      parameters:
        - in: query
          name: q
          schema:
            type: string
          required: false
        - in: query
          name: sort
          schema:
            type: string
            default: Hot
            enum:
              - Hot
              - Top
              - TopHour
              - TopSixHour
              - TopTwelveHour
              - TopWeek
              - TopDay
              - TopMonth
              - TopThreeMonths
              - TopSixMonths
              - TopNineMonths
              - TopYear
              - TopAll
              - New
              - Scaled
              - Active
          required: false
        - in: query
          name: type_
          schema:
            type: string
            default: All
            enum:
              - All
              - Local
              - Subscribed
              - Popular
              - Moderating
              - ModeratorView
          required: false
        - in: query
          name: community_name
          schema:
            type: string
          required: false
        - in: query
          name: community_id
          schema:
            type: integer
          required: false
        - in: query
          name: saved_only
          schema:
            type: boolean
            default: false
          required: false
        - in: query
          name: person_id
          schema:
            type: integer
          required: false
        - in: query
          name: limit
          schema:
            type: integer
            default: 50
          required: false
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          required: false
        - in: query
          name: page_cursor
          schema:
            type: integer
            default: 1
          required: false
        - in: query
          name: liked_only
          schema:
            type: boolean
            default: false
          required: false
        - in: query
          name: feed_id
          schema:
            type: integer
          required: false
        - in: query
          name: topic_id
          schema:
            type: integer
          required: false
      responses:
        "422":
          $ref: '#/components/responses/UNPROCESSABLE_CONTENT'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPostsResponse'
      tags:
        - Post
      summary: List posts.
  /api/alpha/post:
    get:
      parameters:
        - in: query
          name: id
          schema:
            type: integer
          required: true
      responses:
        "422":
          $ref: '#/components/responses/UNPROCESSABLE_CONTENT'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPostResponse'
      tags:
        - Post
      summary: Get/fetch a post
    post:
      responses:
        "422":
          $ref: '#/components/responses/UNPROCESSABLE_CONTENT'
        "429":
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPostResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePostRequest'
      tags:
        - Post
      summary: Create a new post.
    put:
      responses:
        "422":
          $ref: '#/components/responses/UNPROCESSABLE_CONTENT'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPostResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditPostRequest'
      tags:
        - Post
      summary: Edit a post.
  /api/alpha/post/replies:
    get:
      parameters:
        - in: query
          name: post_id
          schema:
            type: integer
          required: false
        - in: query
          name: parent_id
          schema:
            type: integer
          required: false
        - in: query
          name: sort
          schema:
            type: string
            enum:
              - Hot
              - Top
              - New
              - Old
          required: false
        - in: query
          name: max_depth
          schema:
            type: integer
          required: false
        - in: query
          name: page
          schema:
            type: string
          required: false
        - in: query
          name: limit
          schema:
            type: integer
          required: false
      responses:
        "422":
          $ref: '#/components/responses/UNPROCESSABLE_CONTENT'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPostRepliesResponse'
      tags:
        - Post
      summary: Get replies/comments for a post with nested structure.
  /api/alpha/post/like:
    post:
      responses:
        "422":
          $ref: '#/components/responses/UNPROCESSABLE_CONTENT'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPostResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LikePostRequest'
      tags:
        - Post
      summary: Like or unlike a post.
  /api/alpha/post/save:
    put:
      responses:
        "422":
          $ref: '#/components/responses/UNPROCESSABLE_CONTENT'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPostResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SavePostRequest'
      tags:
        - Post
      summary: Save or unsave a post.
  /api/alpha/post/subscribe:
    put:
      responses:
        "422":
          $ref: '#/components/responses/UNPROCESSABLE_CONTENT'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPostResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscribePostRequest'
      tags:
        - Post
      summary: Subscribe or unsubscribe to a post.
  /api/alpha/post/delete:
    post:
      responses:
        "422":
          $ref: '#/components/responses/UNPROCESSABLE_CONTENT'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPostResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeletePostRequest'
      tags:
        - Post
      summary: Delete or restore a post.
  /api/alpha/post/report:
    post:
      responses:
        "422":
          $ref: '#/components/responses/UNPROCESSABLE_CONTENT'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostReportResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReportPostRequest'
      tags:
        - Post
      summary: Report a post.
  /api/alpha/post/lock:
    post:
      responses:
        "422":
          $ref: '#/components/responses/UNPROCESSABLE_CONTENT'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPostResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LockPostRequest'
      tags:
        - Post
      summary: Lock or unlock a post.
  /api/alpha/post/feature:
    post:
      responses:
        "422":
          $ref: '#/components/responses/UNPROCESSABLE_CONTENT'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPostResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeaturePostRequest'
      tags:
        - Post
      summary: Feature or unfeature a post.
  /api/alpha/post/remove:
    post:
      responses:
        "422":
          $ref: '#/components/responses/UNPROCESSABLE_CONTENT'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPostResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemovePostRequest'
      tags:
        - Post
      summary: Remove or restore a post as a moderator.
  /api/alpha/post/mark_as_read:
    post:
      responses:
        "422":
          $ref: '#/components/responses/UNPROCESSABLE_CONTENT'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MarkPostAsReadRequest'
      tags:
        - Post
      summary: Mark one or more posts as read or unread.
  /api/alpha/post/like/list:
    get:
      parameters:
        - in: query
          name: post_id
          schema:
            type: integer
          required: true
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          required: false
        - in: query
          name: limit
          schema:
            type: integer
            default: 50
          required: false
      responses:
        "422":
          $ref: '#/components/responses/UNPROCESSABLE_CONTENT'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPostLikesResponse'
      tags:
        - Post
      summary: View post votes as a moderator.
  /api/alpha/post/assign_flair:
    post:
      responses:
        "422":
          $ref: '#/components/responses/UNPROCESSABLE_CONTENT'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostSetFlairResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostSetFlairRequest'
      tags:
        - Post
      summary: Add/remove flair from a post
  /api/alpha/upload/image:
    post:
      responses:
        "422":
          $ref: '#/components/responses/UNPROCESSABLE_CONTENT'
        "429":
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageUploadResponse'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ImageUploadRequest'
      tags:
        - Upload
      summary: Upload a general image.
  /api/alpha/upload/community_image:
    post:
      responses:
        "422":
          $ref: '#/components/responses/UNPROCESSABLE_CONTENT'
        "429":
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageUploadResponse'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ImageUploadRequest'
      tags:
        - Upload
      summary: Upload a community image.
  /api/alpha/upload/user_image:
    post:
      responses:
        "422":
          $ref: '#/components/responses/UNPROCESSABLE_CONTENT'
        "429":
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageUploadResponse'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ImageUploadRequest'
      tags:
        - Upload
      summary: Upload a user image.
  /api/alpha/private_message/list:
    get:
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          required: false
        - in: query
          name: limit
          schema:
            type: integer
          required: false
        - in: query
          name: unread_only
          schema:
            type: boolean
          required: false
      responses:
        "422":
          $ref: '#/components/responses/UNPROCESSABLE_CONTENT'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPrivateMessagesResponse'
      tags:
        - Private Message
      summary: List private messages.
  /api/alpha/private_message/conversation:
    get:
      parameters:
        - in: query
          name: person_id
          schema:
            type: integer
          required: true
        - in: query
          name: page
          schema:
            type: integer
          required: false
        - in: query
          name: limit
          schema:
            type: integer
          required: false
      responses:
        "422":
          $ref: '#/components/responses/UNPROCESSABLE_CONTENT'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPrivateMessageConversationResponse'
      tags:
        - Private Message
      summary: Get conversation with a specific person.
  /api/alpha/private_message:
    post:
      responses:
        "422":
          $ref: '#/components/responses/UNPROCESSABLE_CONTENT'
        "429":
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrivateMessageResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePrivateMessageRequest'
      tags:
        - Private Message
      summary: Create a new private message.
    put:
      responses:
        "422":
          $ref: '#/components/responses/UNPROCESSABLE_CONTENT'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrivateMessageResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditPrivateMessageRequest'
      tags:
        - Private Message
      summary: Edit a private message.
  /api/alpha/private_message/mark_as_read:
    post:
      responses:
        "422":
          $ref: '#/components/responses/UNPROCESSABLE_CONTENT'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrivateMessageResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MarkPrivateMessageAsReadRequest'
      tags:
        - Private Message
      summary: Mark a private message as read or unread.
  /api/alpha/private_message/delete:
    post:
      responses:
        "422":
          $ref: '#/components/responses/UNPROCESSABLE_CONTENT'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrivateMessageResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeletePrivateMessageRequest'
      tags:
        - Private Message
      summary: Delete or restore a private message.
  /api/alpha/private_message/report:
    post:
      responses:
        "422":
          $ref: '#/components/responses/UNPROCESSABLE_CONTENT'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrivateMessageResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReportPrivateMessageRequest'
      tags:
        - Private Message
      summary: Report a private message.
tags:
  - name: Site
    description: ""
  - name: Misc
    description: ""
  - name: Community
    description: ""
  - name: Feed
    description: ""
  - name: Topic
    description: ""
  - name: User
    description: ""
  - name: Comment
    description: ""
  - name: Post
    description: ""
  - name: Upload
    description: ""
  - name: Private Message
    description: ""
openapi: 3.1.1
